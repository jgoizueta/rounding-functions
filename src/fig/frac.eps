%!PS-Adobe-2.0 EPSF-1.2
%%BoundingBox: 0 356 288 533
%%HiResBoundingBox: 0 356 288 533.938
%%Creator: (Mathematica Microsoft Windows 3.0)
%%Title: Clipboard
%%CreationDate: (01/23/02) (17:00:05)
%%DocumentNeededResources: (atend)
%%DocumentFonts: (atend)
%%DocumentNeededFonts: (atend)
%%EndComments
gsave
150 dict begin
/Mfixwid true def
/Mrot 0 def
/Mpstart {
    MathPictureStart
} bind def
/Mpend {
    MathPictureEnd
} bind def
/Mscale {
    0 1 0 1
    5 -1 roll
    MathScale
} bind def
/Plain  /Courier findfont def
/Bold   /Courier-Bold findfont def
/Italic /Courier-Oblique findfont def
/MathPictureStart {
    /Mimatrix
     matrix currentmatrix
    def
    gsave
    newpath
    Mleft
    Mbottom
    translate
    /Mtmatrix
    matrix currentmatrix
    def
    Plain
    Mfontsize scalefont
    setfont
    0 setgray
    0 setlinewidth
} bind def
/MathPictureEnd {
    grestore
} bind def
/MathSubStart {
         Momatrix
        Mgmatrix Mtmatrix
        Mleft Mbottom
        Mwidth Mheight
        9 -2 roll
        moveto
        Mtmatrix setmatrix
        currentpoint
        Mgmatrix setmatrix
        11 -2 roll
        moveto
        Mtmatrix setmatrix
        currentpoint
        2 copy translate
        /Mtmatrix matrix currentmatrix def
        /Mleft 0 def
        /Mbottom 0 def
        3 -1 roll
        exch sub
        /Mheight exch def
        sub
        /Mwidth exch def
} bind def
/MathSubEnd {
        /Mheight exch def
        /Mwidth exch def
        /Mbottom exch def
        /Mleft exch def
        /Mtmatrix exch def
        dup setmatrix
        /Mgmatrix exch def
          /Momatrix exch def
} bind def
/Mdot {
    moveto
    0 0 rlineto
    stroke
} bind def
/Mtetra {
    moveto
    lineto
    lineto
    lineto
    fill
} bind def
/Metetra {
    moveto
    lineto
    lineto
    lineto
    closepath
    gsave
    fill
    grestore
    0 setgray
    stroke
} bind def
/Mistroke {
    flattenpath
    0 0 0
    {
    4 2 roll
    pop pop
    }
    {
    4 -1 roll
    2 index
    sub dup mul
    4 -1 roll
    2 index
    sub dup mul
    add sqrt
    4 -1 roll
    add
    3 1 roll
    }
    {
    stop
    }
    {
    stop
    }
    pathforall
    pop pop
    currentpoint
    stroke
    moveto
    currentdash
    3 -1 roll
    add
    setdash
} bind def
/Mfstroke {
    stroke
    currentdash
    pop 0
    setdash
} bind def
/Mrotsboxa {
    gsave
    dup
    /Mrot
    exch def
    Mrotcheck
    Mtmatrix
    dup
    setmatrix
    7 1 roll
    4 index
    4 index
    translate
    rotate
    3 index
    -1 mul
    3 index
    -1 mul
    translate
    /Mtmatrix
    matrix
    currentmatrix
    def
    grestore
    Msboxa
    3  -1 roll
    /Mtmatrix
    exch def
    /Mrot
    0 def
} bind def
/Msboxa {
    newpath
    5 -1 roll
    Mvboxa
    pop
    Mboxout
    6 -1 roll
    5 -1 roll
    4 -1 roll
    Msboxa1
    5 -3 roll
    Msboxa1
    Mboxrot
    [
    7 -2 roll
    2 copy
    [
    3 1 roll
    10 -1 roll
    9 -1 roll
    ]
    6 1 roll
    5 -2 roll
    ]
} bind def
/Msboxa1 {
    sub
    2 div
    dup
    2 index
    1 add
    mul
    3 -1 roll
    -1 add
    3 -1 roll
    mul
} bind def
/Mvboxa {
    Mfixwid
    {
    Mvboxa1
    }
    {
    dup
    Mwidthcal
    0 exch
    {
    add
    }
    forall
    exch
    Mvboxa1
    4 index
    7 -1 roll
    add
    4 -1 roll
    pop
    3 1 roll
    }
    ifelse
} bind def
/Mvboxa1 {
    gsave
    newpath
    [ true
    3 -1 roll
    {
    Mbbox
    5 -1 roll
    {
    0
    5 1 roll
    }
    {
    7 -1 roll
    exch sub
    (m) stringwidth pop
    .3 mul
    sub
    7 1 roll
    6 -1 roll
    4 -1 roll
    Mmin
    3 -1 roll
    5 index
    add
    5 -1 roll
    4 -1 roll
    Mmax
    4 -1 roll
    }
    ifelse
    false
    }
    forall
    { stop } if
    counttomark
    1 add
    4 roll
    ]
    grestore
} bind def
/Mbbox {
    0 0 moveto
    false charpath
    flattenpath
    pathbbox
    newpath
} bind def
/Mmin {
    2 copy
    gt
    { exch } if
    pop
} bind def
/Mmax {
    2 copy
    lt
    { exch } if
    pop
} bind def
/Mrotshowa {
    dup
    /Mrot
    exch def
    Mrotcheck
    Mtmatrix
    dup
    setmatrix
    7 1 roll
    4 index
    4 index
    translate
    rotate
    3 index
    -1 mul
    3 index
    -1 mul
    translate
    /Mtmatrix
    matrix
    currentmatrix
    def
    Mgmatrix setmatrix
    Mshowa
    /Mtmatrix
    exch def
    /Mrot 0 def
} bind def
/Mshowa {
    4 -2 roll
    moveto
    2 index
    Mtmatrix setmatrix
    Mvboxa
    7 1 roll
    Mboxout
    6 -1 roll
    5 -1 roll
    4 -1 roll
    Mshowa1
    4 1 roll
    Mshowa1
    rmoveto
    currentpoint
    Mfixwid
    {
    Mshowax
    }
    {
    Mshoway
    }
    ifelse
    pop pop pop pop
    Mgmatrix setmatrix
} bind def
/Mshowax {
    0 1
        4 index length
        -1 add
        {
        2 index
        4 index
        2 index
        get
        3 index
        add
        moveto
        4 index
        exch get
        show
        } for
} bind def
/Mshoway {
        3 index
        Mwidthcal
        5 1 roll
    0 1
    4 index length
    -1 add
    {
    2 index
    4 index
    2 index
    get
    3 index
    add
    moveto
    4 index
    exch get
    [
    6 index
    aload
    length
    2 add
    -1 roll
    {
    pop
    Strform
    stringwidth
    pop
    neg
    exch
    add
    0 rmoveto
    }
    exch
    kshow
    cleartomark
    } for
    pop
} bind def
/Mwidthcal {
    [
    exch
    {
    Mwidthcal1
    }
    forall
    ]
    [
    exch
    dup
    Maxlen
    -1 add
    0 1
    3 -1 roll
    {
    [
    exch
    2 index
    {
    1 index
    Mget
    exch
    }
    forall
    pop
    Maxget
    exch
    }
    for
    pop
    ]
    Mreva
} bind def
/Mreva  {
    [
    exch
    aload
    length
    -1 1
    {1 roll}
    for
    ]
} bind def
/Mget   {
    1 index
    length
    -1 add
    1 index
    ge
    {
    get
    }
    {
    pop pop
    0
    }
    ifelse
} bind def
/Maxlen {
    [
    exch
    {
    length
    }
    forall
    Maxget
} bind def
/Maxget {
    counttomark
    -1 add
    1 1
    3 -1 roll
    {
    pop
    Mmax
    }
    for
    exch
    pop
} bind def
/Mwidthcal1 {
    [
    exch
    {
    Strform
    stringwidth
    pop
    }
    forall
    ]
} bind def
/Strform {
    /tem (x) def
    tem 0
    3 -1 roll
    put
    tem
} bind def
/Mshowa1 {
    2 copy
    add
    4 1 roll
    sub
    mul
    sub
    -2 div
} bind def
/MathScale {
    Mwidth
    Mheight
    Mlp
    translate
    scale
    /yscale exch def
    /ybias exch def
    /xscale exch def
    /xbias exch def
    /Momatrix
    xscale yscale matrix scale
    xbias ybias matrix translate
    matrix concatmatrix def
    /Mgmatrix
    matrix currentmatrix
    def
} bind def
/Mlp {
    3 copy
    Mlpfirst
    {
    Mnodistort
    {
    Mmin
    dup
    } if
    4 index
    2 index
    2 index
    Mlprun
    11 index
    11 -1 roll
    10 -4 roll
    Mlp1
    8 index
    9 -5 roll
    Mlp1
    4 -1 roll
    and
    { exit } if
    3 -1 roll
    pop pop
    } loop
    exch
    3 1 roll
    7 -3 roll
    pop pop pop
} bind def
/Mlpfirst {
    3 -1 roll
    dup length
    2 copy
    -2 add
    get
    aload
    pop pop pop
    4 -2 roll
    -1 add
    get
    aload
    pop pop pop
    6 -1 roll
    3 -1 roll
    5 -1 roll
    sub
    dup /MsaveAx exch def
    div
    4 1 roll
    exch sub
    dup /MsaveAy exch def
    div
} bind def
/Mlprun {
    2 copy
    4 index
    0 get
    dup
    4 1 roll
    Mlprun1
    3 copy
    8 -2 roll
    9 -1 roll
    {
    3 copy
    Mlprun1
    3 copy
    11 -3 roll
    /gt Mlpminmax
    8 3 roll
    11 -3 roll
    /lt Mlpminmax
    8 3 roll
    } forall
    pop pop pop pop
    3 1 roll
    pop pop
    aload pop
    5 -1 roll
    aload pop
    exch
    6 -1 roll
    Mlprun2
    8 2 roll
    4 -1 roll
    Mlprun2
    6 2 roll
    3 -1 roll
    Mlprun2
    4 2 roll
    exch
    Mlprun2
    6 2 roll
} bind def
/Mlprun1 {
    aload pop
    exch
    6 -1 roll
    5 -1 roll
    mul add
    4 -2 roll
    mul
    3 -1 roll
    add
} bind def
/Mlprun2 {
    2 copy
    add 2 div
    3 1 roll
    exch sub
} bind def
/Mlpminmax {
    cvx
    2 index
    6 index
    2 index
    exec
    {
    7 -3 roll
    4 -1 roll
    } if
    1 index
    5 index
    3 -1 roll
    exec
    {
    4 1 roll
    pop
    5 -1 roll
    aload
    pop pop
    4 -1 roll
    aload pop
    [
    8 -2 roll
    pop
    5 -2 roll
    pop
    6 -2 roll
    pop
    5 -1 roll
    ]
    4 1 roll
    pop
    }
    {
    pop pop pop
    } ifelse
} bind def
/Mlp1 {
    5 index
    3 index sub
    5 index
    2 index mul
    1 index
    le
    1 index
    0 le
    or
    dup
    not
    {
    1 index
    3 index div
    .99999 mul
    8 -1 roll
    pop
    7 1 roll
    }
    if
    8 -1 roll
    2 div
    7 -2 roll
    pop sub
    5 index
    6 -3 roll
    pop pop
    mul sub
    exch
} bind def
/intop 0 def
/inrht 0 def
/inflag 0 def
/outflag 0 def
/xadrht 0 def
/xadlft 0 def
/yadtop 0 def
/yadbot 0 def
/Minner {
    outflag
    1
    eq
    {
    /outflag 0 def
    /intop 0 def
    /inrht 0 def
    } if
    5 index
    gsave
    Mtmatrix setmatrix
    Mvboxa pop
    grestore
    3 -1 roll
    pop
    dup
    intop
    gt
    {
    /intop
    exch def
    }
    { pop }
    ifelse
    dup
    inrht
    gt
    {
    /inrht
    exch def
    }
    { pop }
    ifelse
    pop
    /inflag
    1 def
} bind def
/Mouter {
    /xadrht 0 def
    /xadlft 0 def
    /yadtop 0 def
    /yadbot 0 def
    inflag
    1 eq
    {
    dup
    0 lt
    {
    dup
    intop
    mul
    neg
    /yadtop
    exch def
    } if
    dup
    0 gt
    {
    dup
    intop
    mul
    /yadbot
    exch def
    }
    if
    pop
    dup
    0 lt
    {
    dup
    inrht
    mul
    neg
    /xadrht
    exch def
    } if
    dup
    0 gt
    {
    dup
    inrht
    mul
    /xadlft
    exch def
    } if
    pop
    /outflag 1 def
    }
    { pop pop}
    ifelse
    /inflag 0 def
    /inrht 0 def
    /intop 0 def
} bind def
/Mboxout {
    outflag
    1
    eq
    {
    4 -1
    roll
    xadlft
    leadjust
    add
    sub
    4 1 roll
    3 -1
    roll
    yadbot
    leadjust
    add
    sub
    3 1
    roll
    exch
    xadrht
    leadjust
    add
    add
    exch
    yadtop
    leadjust
    add
    add
    /outflag 0 def
    /xadlft 0 def
    /yadbot 0 def
    /xadrht 0 def
    /yadtop 0 def
    } if
} bind def
/leadjust {
    (m) stringwidth pop
    .5 mul
} bind def
/Mrotcheck {
    dup
    90
    eq
    {
    yadbot
    /yadbot
    xadrht
    def
    /xadrht
    yadtop
    def
    /yadtop
    xadlft
    def
    /xadlft
    exch
    def
    }
    if
    dup
    cos
    1 index
    sin
    Checkaux
    dup
    cos
    1 index
    sin neg
    exch
    Checkaux
    3 1 roll
    pop pop
} bind def
/Checkaux {
    4 index
    exch
    4 index
    mul
    3 1 roll
    mul add
    4 1 roll
} bind def
/Mboxrot {
    Mrot
    90 eq
    {
    brotaux
    4 2
    roll
    }
    if
    Mrot
    180 eq
    {
    4 2
        roll
    brotaux
    4 2
    roll
    brotaux
    }
    if
    Mrot
    270 eq
    {
    4 2
    roll
    brotaux
    }
    if
} bind def
/brotaux {
    neg
    exch
    neg
} bind def
/Mabsproc {
        0
        matrix defaultmatrix
        dtransform idtransform
        dup mul exch
        dup mul
        add sqrt
} bind def
/Mabswid {
        Mabsproc
        setlinewidth
} bind def
/Mabsdash {
        exch
        [
        exch
        {
        Mabsproc
        }
        forall
        ]
        exch
        setdash
} bind def
/MBeginOrig { Momatrix concat} bind def
/MEndOrig { Mgmatrix setmatrix} bind def
/sampledsound where
{ pop}
{ /sampledsound {
exch
pop
exch
5 1 roll
mul
4 idiv
mul
2 idiv
exch pop
exch
/Mtempproc exch def
{ Mtempproc pop }
repeat
} bind def
} ifelse
% Here are the short operators
/g { setgray} bind def
/k { setcmykcolor} bind def
/m { moveto} bind def
/p { gsave} bind def
/r { setrgbcolor} bind def
/w { setlinewidth} bind def
/C { curveto} bind def
/F { fill} bind def
/L { lineto} bind def
/P { grestore} bind def
/s { stroke} bind def

/MFill {
    0 0         moveto
    Mwidth 0    lineto
    Mwidth Mheight  lineto
    0 Mheight   lineto
    fill
} bind def

/MPlotRegion {
    3 index
    Mwidth mul
    2 index
    Mheight mul
    translate
    exch sub
    Mheight mul
    /Mheight
    exch def
    exch sub
    Mwidth mul
    /Mwidth
    exch def
} bind def

/Mcharproc
{
    currentfile
    (x)
    readhexstring
    pop
    0 get
    exch
    div
} bind def

/Mshadeproc
{
    dup
    3 1
    roll
    {
    dup
    Mcharproc
    3 1
    roll
    } repeat
    1 eq
    {
    setgray
    }
    {
    3 eq
    {
    setrgbcolor
    }
    {
    setcmykcolor
    } ifelse
    } ifelse
} bind def

/Mrectproc
{
    3 index
    2 index
    moveto
    2 index
    3 -1
    roll
    lineto
    dup
    3 1
    roll
    lineto
    lineto
    fill
} bind def

/Mcolorimage
{
    7 1
    roll
    pop
    pop
    matrix
    invertmatrix
    concat
    2 exch exp
    1 sub
    3 1 roll
    1 1
    2 index
    {
    1 1
    4 index
    {
    dup
    1 sub
    exch
    2 index
    dup
    1 sub
    exch
    7 index
    9 index
    Mshadeproc
    Mrectproc
    } for
    pop
    } for
    pop pop pop pop
} bind def

/Mimage
{
    pop
    matrix
    invertmatrix
    concat
    2 exch exp
    1 sub
    3 1 roll
    1 1
    2 index
    {
    1 1
    4 index
    {
    dup
    1 sub 
    exch
    2 index
    dup
    1 sub
    exch
    7 index
    Mcharproc
    setgray
    Mrectproc
    } for
    pop
    } for
    pop pop pop
} bind def
/Mnodistort true def
/colorimage where
{ pop /Mcolorimage {colorimage} bind def /Mimage {image} bind def}
{
/colorimage {Mcolorimage} bind def
} ifelse
1.000000 1.000000 scale
0.000000 177.937500 translate
1.000000 -1.000000 scale
0.000000 0.000000 translate
/Mleft      0.000000 def
/Mbottom    0.000000 def
/Mwidth     288.000000 def
/Mheight    177.937500 def
0 setgray
0 setlinewidth
/Courier findfont 12 scalefont setfont
/Mfontsize 12 def
/Plain /Courier findfont def

0 Mbottom Mheight neg add 2 mul Mheight add translate
1 -1 scale
%!
%%Creator: Mathematica
%%AspectRatio: .61803 
MathPictureStart
/Mabs {
Mgmatrix idtransform
Mtmatrix dtransform
} bind def
/Mabsadd { Mabs
3 -1 roll add
3 1 roll add
exch } bind def
%% Graphics
/Courier findfont 10  scalefont  setfont
% Scaling calculations
0.492441 0.151172 0.308598 0.294729 [
[.03893 .2961 -6 -9 ]
[.03893 .2961 6 0 ]
[.1901 .2961 -6 -9 ]
[.1901 .2961 6 0 ]
[.34127 .2961 -6 -9 ]
[.34127 .2961 6 0 ]
[.64361 .2961 -3 -9 ]
[.64361 .2961 3 0 ]
[.79478 .2961 -3 -9 ]
[.79478 .2961 3 0 ]
[.94596 .2961 -3 -9 ]
[.94596 .2961 3 0 ]
[.47994 .01387 -12 -4.5 ]
[.47994 .01387 0 4.5 ]
[.47994 .16123 -24 -4.5 ]
[.47994 .16123 0 4.5 ]
[.47994 .45596 -18 -4.5 ]
[.47994 .45596 0 4.5 ]
[.47994 .60333 -6 -4.5 ]
[.47994 .60333 0 4.5 ]
[ 0 0 0 0 ]
[ 1 .61803 0 0 ]
] MathScale
% Start of Graphics
1 setlinecap
1 setlinejoin
newpath
0 g
.25 Mabswid
.03893 .3086 m
.03893 .31485 L
s
[(-3)] .03893 .2961 0 1 Mshowa
.1901 .3086 m
.1901 .31485 L
s
[(-2)] .1901 .2961 0 1 Mshowa
.34127 .3086 m
.34127 .31485 L
s
[(-1)] .34127 .2961 0 1 Mshowa
.64361 .3086 m
.64361 .31485 L
s
[(1)] .64361 .2961 0 1 Mshowa
.79478 .3086 m
.79478 .31485 L
s
[(2)] .79478 .2961 0 1 Mshowa
.94596 .3086 m
.94596 .31485 L
s
[(3)] .94596 .2961 0 1 Mshowa
.125 Mabswid
.06916 .3086 m
.06916 .31235 L
s
.0994 .3086 m
.0994 .31235 L
s
.12963 .3086 m
.12963 .31235 L
s
.15986 .3086 m
.15986 .31235 L
s
.22033 .3086 m
.22033 .31235 L
s
.25057 .3086 m
.25057 .31235 L
s
.2808 .3086 m
.2808 .31235 L
s
.31104 .3086 m
.31104 .31235 L
s
.3715 .3086 m
.3715 .31235 L
s
.40174 .3086 m
.40174 .31235 L
s
.43197 .3086 m
.43197 .31235 L
s
.46221 .3086 m
.46221 .31235 L
s
.52268 .3086 m
.52268 .31235 L
s
.55291 .3086 m
.55291 .31235 L
s
.58314 .3086 m
.58314 .31235 L
s
.61338 .3086 m
.61338 .31235 L
s
.67385 .3086 m
.67385 .31235 L
s
.70408 .3086 m
.70408 .31235 L
s
.73432 .3086 m
.73432 .31235 L
s
.76455 .3086 m
.76455 .31235 L
s
.82502 .3086 m
.82502 .31235 L
s
.85525 .3086 m
.85525 .31235 L
s
.88549 .3086 m
.88549 .31235 L
s
.91572 .3086 m
.91572 .31235 L
s
.00869 .3086 m
.00869 .31235 L
s
.97619 .3086 m
.97619 .31235 L
s
.25 Mabswid
0 .3086 m
1 .3086 L
s
.49244 .01387 m
.49869 .01387 L
s
[(-1)] .47994 .01387 1 0 Mshowa
.49244 .16123 m
.49869 .16123 L
s
[(-0.5)] .47994 .16123 1 0 Mshowa
.49244 .45596 m
.49869 .45596 L
s
[(0.5)] .47994 .45596 1 0 Mshowa
.49244 .60333 m
.49869 .60333 L
s
[(1)] .47994 .60333 1 0 Mshowa
.125 Mabswid
.49244 .04334 m
.49619 .04334 L
s
.49244 .07281 m
.49619 .07281 L
s
.49244 .10229 m
.49619 .10229 L
s
.49244 .13176 m
.49619 .13176 L
s
.49244 .19071 m
.49619 .19071 L
s
.49244 .22018 m
.49619 .22018 L
s
.49244 .24965 m
.49619 .24965 L
s
.49244 .27913 m
.49619 .27913 L
s
.49244 .33807 m
.49619 .33807 L
s
.49244 .36754 m
.49619 .36754 L
s
.49244 .39702 m
.49619 .39702 L
s
.49244 .42649 m
.49619 .42649 L
s
.49244 .48544 m
.49619 .48544 L
s
.49244 .51491 m
.49619 .51491 L
s
.49244 .54438 m
.49619 .54438 L
s
.49244 .57385 m
.49619 .57385 L
s
.25 Mabswid
.49244 0 m
.49244 .61803 L
s
0 0 m
1 0 L
1 .61803 L
0 .61803 L
closepath
clip
newpath
.5 Mabswid
.02381 .27913 m
.02846 .28818 L
.03279 .29663 L
.03523 .30139 L
.03754 .30589 L
.03881 .30837 L
.03953 .01505 L
.0402 .01634 L
.04262 .02106 L
.06244 .05972 L
.10458 .14187 L
.14393 .21859 L
.16369 .25711 L
.17233 .27396 L
.18177 .29235 L
.18426 .29722 L
.18693 .30241 L
.18822 .30493 L
.18944 .30731 L
.19053 .01472 L
.19172 .01702 L
.20117 .03546 L
.22205 .07617 L
.26306 .15611 L
.30254 .2331 L
.32241 .27182 L
.33108 .28873 L
.33566 .29765 L
.33816 .30254 L
.33939 .30493 L
.34052 .30713 L
.34171 .01472 L
.34299 .01722 L
.34572 .02254 L
.35053 .03193 L
.36003 .05044 L
.38094 .09121 L
.42056 .16846 L
.45867 .24276 L
.49923 .32184 L
.53828 .39796 L
.57978 .47887 L
.60058 .51943 L
.61976 .55682 L
.62941 .57564 L
.63844 .59325 L
.64077 .59779 L
.64192 .60003 L
.64298 .6021 L
.6442 .30975 L
Mistroke
.64485 .31101 L
.64553 .31234 L
.64786 .31688 L
.65822 .33709 L
.69986 .41826 L
.73998 .49647 L
.75839 .53238 L
.76884 .55275 L
.77858 .57174 L
.78823 .59055 L
.79101 .59596 L
.79237 .59863 L
.79364 .60109 L
.79478 .60332 L
.796 .31096 L
.79721 .31334 L
.79856 .31596 L
.81964 .35705 L
.85989 .43553 L
.89863 .51106 L
.91832 .54944 L
.92872 .56973 L
.93444 .58087 L
.93982 .59137 L
.94213 .59587 L
.94457 .60062 L
.94584 .60311 L
.94657 .30979 L
.94724 .31111 L
.94971 .31591 L
.95867 .33339 L
.97619 .36754 L
Mfstroke
5 Mabswid
.03893 .3086 Mdot
.1901 .3086 Mdot
.34127 .3086 Mdot
.49244 .3086 Mdot
.64361 .3086 Mdot
.79478 .3086 Mdot
.94596 .3086 Mdot
% End of Graphics
MathPictureEnd
%%PSTrailer
end
grestore

%%EPS Trailer
