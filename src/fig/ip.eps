%!PS-Adobe-2.0 EPSF-1.2
%%BoundingBox: 0 356 288 533
%%HiResBoundingBox: 0 0 356 533.938
%%Creator: (Mathematica Microsoft Windows 3.0)
%%Title: Clipboard
%%CreationDate: (01/23/02) (16:38:11)
%%DocumentNeededResources: (atend)
%%DocumentFonts: (atend)
%%DocumentNeededFonts: (atend)
%%EndComments
gsave
150 dict begin
/Mfixwid true def
/Mrot 0 def
/Mpstart {
    MathPictureStart
} bind def
/Mpend {
    MathPictureEnd
} bind def
/Mscale {
    0 1 0 1
    5 -1 roll
    MathScale
} bind def
/Plain  /Courier findfont def
/Bold   /Courier-Bold findfont def
/Italic /Courier-Oblique findfont def
/MathPictureStart {
    /Mimatrix
     matrix currentmatrix
    def
    gsave
    newpath
    Mleft
    Mbottom
    translate
    /Mtmatrix
    matrix currentmatrix
    def
    Plain
    Mfontsize scalefont
    setfont
    0 setgray
    0 setlinewidth
} bind def
/MathPictureEnd {
    grestore
} bind def
/MathSubStart {
         Momatrix
        Mgmatrix Mtmatrix
        Mleft Mbottom
        Mwidth Mheight
        9 -2 roll
        moveto
        Mtmatrix setmatrix
        currentpoint
        Mgmatrix setmatrix
        11 -2 roll
        moveto
        Mtmatrix setmatrix
        currentpoint
        2 copy translate
        /Mtmatrix matrix currentmatrix def
        /Mleft 0 def
        /Mbottom 0 def
        3 -1 roll
        exch sub
        /Mheight exch def
        sub
        /Mwidth exch def
} bind def
/MathSubEnd {
        /Mheight exch def
        /Mwidth exch def
        /Mbottom exch def
        /Mleft exch def
        /Mtmatrix exch def
        dup setmatrix
        /Mgmatrix exch def
          /Momatrix exch def
} bind def
/Mdot {
    moveto
    0 0 rlineto
    stroke
} bind def
/Mtetra {
    moveto
    lineto
    lineto
    lineto
    fill
} bind def
/Metetra {
    moveto
    lineto
    lineto
    lineto
    closepath
    gsave
    fill
    grestore
    0 setgray
    stroke
} bind def
/Mistroke {
    flattenpath
    0 0 0
    {
    4 2 roll
    pop pop
    }
    {
    4 -1 roll
    2 index
    sub dup mul
    4 -1 roll
    2 index
    sub dup mul
    add sqrt
    4 -1 roll
    add
    3 1 roll
    }
    {
    stop
    }
    {
    stop
    }
    pathforall
    pop pop
    currentpoint
    stroke
    moveto
    currentdash
    3 -1 roll
    add
    setdash
} bind def
/Mfstroke {
    stroke
    currentdash
    pop 0
    setdash
} bind def
/Mrotsboxa {
    gsave
    dup
    /Mrot
    exch def
    Mrotcheck
    Mtmatrix
    dup
    setmatrix
    7 1 roll
    4 index
    4 index
    translate
    rotate
    3 index
    -1 mul
    3 index
    -1 mul
    translate
    /Mtmatrix
    matrix
    currentmatrix
    def
    grestore
    Msboxa
    3  -1 roll
    /Mtmatrix
    exch def
    /Mrot
    0 def
} bind def
/Msboxa {
    newpath
    5 -1 roll
    Mvboxa
    pop
    Mboxout
    6 -1 roll
    5 -1 roll
    4 -1 roll
    Msboxa1
    5 -3 roll
    Msboxa1
    Mboxrot
    [
    7 -2 roll
    2 copy
    [
    3 1 roll
    10 -1 roll
    9 -1 roll
    ]
    6 1 roll
    5 -2 roll
    ]
} bind def
/Msboxa1 {
    sub
    2 div
    dup
    2 index
    1 add
    mul
    3 -1 roll
    -1 add
    3 -1 roll
    mul
} bind def
/Mvboxa {
    Mfixwid
    {
    Mvboxa1
    }
    {
    dup
    Mwidthcal
    0 exch
    {
    add
    }
    forall
    exch
    Mvboxa1
    4 index
    7 -1 roll
    add
    4 -1 roll
    pop
    3 1 roll
    }
    ifelse
} bind def
/Mvboxa1 {
    gsave
    newpath
    [ true
    3 -1 roll
    {
    Mbbox
    5 -1 roll
    {
    0
    5 1 roll
    }
    {
    7 -1 roll
    exch sub
    (m) stringwidth pop
    .3 mul
    sub
    7 1 roll
    6 -1 roll
    4 -1 roll
    Mmin
    3 -1 roll
    5 index
    add
    5 -1 roll
    4 -1 roll
    Mmax
    4 -1 roll
    }
    ifelse
    false
    }
    forall
    { stop } if
    counttomark
    1 add
    4 roll
    ]
    grestore
} bind def
/Mbbox {
    0 0 moveto
    false charpath
    flattenpath
    pathbbox
    newpath
} bind def
/Mmin {
    2 copy
    gt
    { exch } if
    pop
} bind def
/Mmax {
    2 copy
    lt
    { exch } if
    pop
} bind def
/Mrotshowa {
    dup
    /Mrot
    exch def
    Mrotcheck
    Mtmatrix
    dup
    setmatrix
    7 1 roll
    4 index
    4 index
    translate
    rotate
    3 index
    -1 mul
    3 index
    -1 mul
    translate
    /Mtmatrix
    matrix
    currentmatrix
    def
    Mgmatrix setmatrix
    Mshowa
    /Mtmatrix
    exch def
    /Mrot 0 def
} bind def
/Mshowa {
    4 -2 roll
    moveto
    2 index
    Mtmatrix setmatrix
    Mvboxa
    7 1 roll
    Mboxout
    6 -1 roll
    5 -1 roll
    4 -1 roll
    Mshowa1
    4 1 roll
    Mshowa1
    rmoveto
    currentpoint
    Mfixwid
    {
    Mshowax
    }
    {
    Mshoway
    }
    ifelse
    pop pop pop pop
    Mgmatrix setmatrix
} bind def
/Mshowax {
    0 1
        4 index length
        -1 add
        {
        2 index
        4 index
        2 index
        get
        3 index
        add
        moveto
        4 index
        exch get
        show
        } for
} bind def
/Mshoway {
        3 index
        Mwidthcal
        5 1 roll
    0 1
    4 index length
    -1 add
    {
    2 index
    4 index
    2 index
    get
    3 index
    add
    moveto
    4 index
    exch get
    [
    6 index
    aload
    length
    2 add
    -1 roll
    {
    pop
    Strform
    stringwidth
    pop
    neg
    exch
    add
    0 rmoveto
    }
    exch
    kshow
    cleartomark
    } for
    pop
} bind def
/Mwidthcal {
    [
    exch
    {
    Mwidthcal1
    }
    forall
    ]
    [
    exch
    dup
    Maxlen
    -1 add
    0 1
    3 -1 roll
    {
    [
    exch
    2 index
    {
    1 index
    Mget
    exch
    }
    forall
    pop
    Maxget
    exch
    }
    for
    pop
    ]
    Mreva
} bind def
/Mreva  {
    [
    exch
    aload
    length
    -1 1
    {1 roll}
    for
    ]
} bind def
/Mget   {
    1 index
    length
    -1 add
    1 index
    ge
    {
    get
    }
    {
    pop pop
    0
    }
    ifelse
} bind def
/Maxlen {
    [
    exch
    {
    length
    }
    forall
    Maxget
} bind def
/Maxget {
    counttomark
    -1 add
    1 1
    3 -1 roll
    {
    pop
    Mmax
    }
    for
    exch
    pop
} bind def
/Mwidthcal1 {
    [
    exch
    {
    Strform
    stringwidth
    pop
    }
    forall
    ]
} bind def
/Strform {
    /tem (x) def
    tem 0
    3 -1 roll
    put
    tem
} bind def
/Mshowa1 {
    2 copy
    add
    4 1 roll
    sub
    mul
    sub
    -2 div
} bind def
/MathScale {
    Mwidth
    Mheight
    Mlp
    translate
    scale
    /yscale exch def
    /ybias exch def
    /xscale exch def
    /xbias exch def
    /Momatrix
    xscale yscale matrix scale
    xbias ybias matrix translate
    matrix concatmatrix def
    /Mgmatrix
    matrix currentmatrix
    def
} bind def
/Mlp {
    3 copy
    Mlpfirst
    {
    Mnodistort
    {
    Mmin
    dup
    } if
    4 index
    2 index
    2 index
    Mlprun
    11 index
    11 -1 roll
    10 -4 roll
    Mlp1
    8 index
    9 -5 roll
    Mlp1
    4 -1 roll
    and
    { exit } if
    3 -1 roll
    pop pop
    } loop
    exch
    3 1 roll
    7 -3 roll
    pop pop pop
} bind def
/Mlpfirst {
    3 -1 roll
    dup length
    2 copy
    -2 add
    get
    aload
    pop pop pop
    4 -2 roll
    -1 add
    get
    aload
    pop pop pop
    6 -1 roll
    3 -1 roll
    5 -1 roll
    sub
    dup /MsaveAx exch def
    div
    4 1 roll
    exch sub
    dup /MsaveAy exch def
    div
} bind def
/Mlprun {
    2 copy
    4 index
    0 get
    dup
    4 1 roll
    Mlprun1
    3 copy
    8 -2 roll
    9 -1 roll
    {
    3 copy
    Mlprun1
    3 copy
    11 -3 roll
    /gt Mlpminmax
    8 3 roll
    11 -3 roll
    /lt Mlpminmax
    8 3 roll
    } forall
    pop pop pop pop
    3 1 roll
    pop pop
    aload pop
    5 -1 roll
    aload pop
    exch
    6 -1 roll
    Mlprun2
    8 2 roll
    4 -1 roll
    Mlprun2
    6 2 roll
    3 -1 roll
    Mlprun2
    4 2 roll
    exch
    Mlprun2
    6 2 roll
} bind def
/Mlprun1 {
    aload pop
    exch
    6 -1 roll
    5 -1 roll
    mul add
    4 -2 roll
    mul
    3 -1 roll
    add
} bind def
/Mlprun2 {
    2 copy
    add 2 div
    3 1 roll
    exch sub
} bind def
/Mlpminmax {
    cvx
    2 index
    6 index
    2 index
    exec
    {
    7 -3 roll
    4 -1 roll
    } if
    1 index
    5 index
    3 -1 roll
    exec
    {
    4 1 roll
    pop
    5 -1 roll
    aload
    pop pop
    4 -1 roll
    aload pop
    [
    8 -2 roll
    pop
    5 -2 roll
    pop
    6 -2 roll
    pop
    5 -1 roll
    ]
    4 1 roll
    pop
    }
    {
    pop pop pop
    } ifelse
} bind def
/Mlp1 {
    5 index
    3 index sub
    5 index
    2 index mul
    1 index
    le
    1 index
    0 le
    or
    dup
    not
    {
    1 index
    3 index div
    .99999 mul
    8 -1 roll
    pop
    7 1 roll
    }
    if
    8 -1 roll
    2 div
    7 -2 roll
    pop sub
    5 index
    6 -3 roll
    pop pop
    mul sub
    exch
} bind def
/intop 0 def
/inrht 0 def
/inflag 0 def
/outflag 0 def
/xadrht 0 def
/xadlft 0 def
/yadtop 0 def
/yadbot 0 def
/Minner {
    outflag
    1
    eq
    {
    /outflag 0 def
    /intop 0 def
    /inrht 0 def
    } if
    5 index
    gsave
    Mtmatrix setmatrix
    Mvboxa pop
    grestore
    3 -1 roll
    pop
    dup
    intop
    gt
    {
    /intop
    exch def
    }
    { pop }
    ifelse
    dup
    inrht
    gt
    {
    /inrht
    exch def
    }
    { pop }
    ifelse
    pop
    /inflag
    1 def
} bind def
/Mouter {
    /xadrht 0 def
    /xadlft 0 def
    /yadtop 0 def
    /yadbot 0 def
    inflag
    1 eq
    {
    dup
    0 lt
    {
    dup
    intop
    mul
    neg
    /yadtop
    exch def
    } if
    dup
    0 gt
    {
    dup
    intop
    mul
    /yadbot
    exch def
    }
    if
    pop
    dup
    0 lt
    {
    dup
    inrht
    mul
    neg
    /xadrht
    exch def
    } if
    dup
    0 gt
    {
    dup
    inrht
    mul
    /xadlft
    exch def
    } if
    pop
    /outflag 1 def
    }
    { pop pop}
    ifelse
    /inflag 0 def
    /inrht 0 def
    /intop 0 def
} bind def
/Mboxout {
    outflag
    1
    eq
    {
    4 -1
    roll
    xadlft
    leadjust
    add
    sub
    4 1 roll
    3 -1
    roll
    yadbot
    leadjust
    add
    sub
    3 1
    roll
    exch
    xadrht
    leadjust
    add
    add
    exch
    yadtop
    leadjust
    add
    add
    /outflag 0 def
    /xadlft 0 def
    /yadbot 0 def
    /xadrht 0 def
    /yadtop 0 def
    } if
} bind def
/leadjust {
    (m) stringwidth pop
    .5 mul
} bind def
/Mrotcheck {
    dup
    90
    eq
    {
    yadbot
    /yadbot
    xadrht
    def
    /xadrht
    yadtop
    def
    /yadtop
    xadlft
    def
    /xadlft
    exch
    def
    }
    if
    dup
    cos
    1 index
    sin
    Checkaux
    dup
    cos
    1 index
    sin neg
    exch
    Checkaux
    3 1 roll
    pop pop
} bind def
/Checkaux {
    4 index
    exch
    4 index
    mul
    3 1 roll
    mul add
    4 1 roll
} bind def
/Mboxrot {
    Mrot
    90 eq
    {
    brotaux
    4 2
    roll
    }
    if
    Mrot
    180 eq
    {
    4 2
        roll
    brotaux
    4 2
    roll
    brotaux
    }
    if
    Mrot
    270 eq
    {
    4 2
    roll
    brotaux
    }
    if
} bind def
/brotaux {
    neg
    exch
    neg
} bind def
/Mabsproc {
        0
        matrix defaultmatrix
        dtransform idtransform
        dup mul exch
        dup mul
        add sqrt
} bind def
/Mabswid {
        Mabsproc
        setlinewidth
} bind def
/Mabsdash {
        exch
        [
        exch
        {
        Mabsproc
        }
        forall
        ]
        exch
        setdash
} bind def
/MBeginOrig { Momatrix concat} bind def
/MEndOrig { Mgmatrix setmatrix} bind def
/sampledsound where
{ pop}
{ /sampledsound {
exch
pop
exch
5 1 roll
mul
4 idiv
mul
2 idiv
exch pop
exch
/Mtempproc exch def
{ Mtempproc pop }
repeat
} bind def
} ifelse
% Here are the short operators
/g { setgray} bind def
/k { setcmykcolor} bind def
/m { moveto} bind def
/p { gsave} bind def
/r { setrgbcolor} bind def
/w { setlinewidth} bind def
/C { curveto} bind def
/F { fill} bind def
/L { lineto} bind def
/P { grestore} bind def
/s { stroke} bind def

/MFill {
    0 0         moveto
    Mwidth 0    lineto
    Mwidth Mheight  lineto
    0 Mheight   lineto
    fill
} bind def

/MPlotRegion {
    3 index
    Mwidth mul
    2 index
    Mheight mul
    translate
    exch sub
    Mheight mul
    /Mheight
    exch def
    exch sub
    Mwidth mul
    /Mwidth
    exch def
} bind def

/Mcharproc
{
    currentfile
    (x)
    readhexstring
    pop
    0 get
    exch
    div
} bind def

/Mshadeproc
{
    dup
    3 1
    roll
    {
    dup
    Mcharproc
    3 1
    roll
    } repeat
    1 eq
    {
    setgray
    }
    {
    3 eq
    {
    setrgbcolor
    }
    {
    setcmykcolor
    } ifelse
    } ifelse
} bind def

/Mrectproc
{
    3 index
    2 index
    moveto
    2 index
    3 -1
    roll
    lineto
    dup
    3 1
    roll
    lineto
    lineto
    fill
} bind def

/Mcolorimage
{
    7 1
    roll
    pop
    pop
    matrix
    invertmatrix
    concat
    2 exch exp
    1 sub
    3 1 roll
    1 1
    2 index
    {
    1 1
    4 index
    {
    dup
    1 sub
    exch
    2 index
    dup
    1 sub
    exch
    7 index
    9 index
    Mshadeproc
    Mrectproc
    } for
    pop
    } for
    pop pop pop pop
} bind def

/Mimage
{
    pop
    matrix
    invertmatrix
    concat
    2 exch exp
    1 sub
    3 1 roll
    1 1
    2 index
    {
    1 1
    4 index
    {
    dup
    1 sub 
    exch
    2 index
    dup
    1 sub
    exch
    7 index
    Mcharproc
    setgray
    Mrectproc
    } for
    pop
    } for
    pop pop pop
} bind def
/Mnodistort true def
/colorimage where
{ pop /Mcolorimage {colorimage} bind def /Mimage {image} bind def}
{
/colorimage {Mcolorimage} bind def
} ifelse
1.000000 1.000000 scale
0.000000 177.937500 translate
1.000000 -1.000000 scale
0.000000 0.000000 translate
/Mleft      0.000000 def
/Mbottom    0.000000 def
/Mwidth     288.000000 def
/Mheight    177.937500 def
0 setgray
0 setlinewidth
/Courier findfont 12 scalefont setfont
/Mfontsize 12 def
/Plain /Courier findfont def

0 Mbottom Mheight neg add 2 mul Mheight add translate
1 -1 scale
%!
%%Creator: Mathematica
%%AspectRatio: .61803 
MathPictureStart
/Mabs {
Mgmatrix idtransform
Mtmatrix dtransform
} bind def
/Mabsadd { Mabs
3 -1 roll add
3 1 roll add
exch } bind def
%% Graphics
/Courier findfont 10  scalefont  setfont
% Scaling calculations
0.5 0.15361 0.309017 0.0981006 [
[.03917 .29652 -6 -9 ]
[.03917 .29652 6 0 ]
[.19278 .29652 -6 -9 ]
[.19278 .29652 6 0 ]
[.34639 .29652 -6 -9 ]
[.34639 .29652 6 0 ]
[.65361 .29652 -3 -9 ]
[.65361 .29652 3 0 ]
[.80722 .29652 -3 -9 ]
[.80722 .29652 3 0 ]
[.96083 .29652 -3 -9 ]
[.96083 .29652 3 0 ]
[.4875 .01472 -12 -4.5 ]
[.4875 .01472 0 4.5 ]
[.4875 .11282 -12 -4.5 ]
[.4875 .11282 0 4.5 ]
[.4875 .21092 -12 -4.5 ]
[.4875 .21092 0 4.5 ]
[.4875 .40712 -6 -4.5 ]
[.4875 .40712 0 4.5 ]
[.4875 .50522 -6 -4.5 ]
[.4875 .50522 0 4.5 ]
[.4875 .60332 -6 -4.5 ]
[.4875 .60332 0 4.5 ]
[ 0 0 0 0 ]
[ 1 .61803 0 0 ]
] MathScale
% Start of Graphics
1 setlinecap
1 setlinejoin
newpath
0 g
.25 Mabswid
.03917 .30902 m
.03917 .31527 L
s
[(-3)] .03917 .29652 0 1 Mshowa
.19278 .30902 m
.19278 .31527 L
s
[(-2)] .19278 .29652 0 1 Mshowa
.34639 .30902 m
.34639 .31527 L
s
[(-1)] .34639 .29652 0 1 Mshowa
.65361 .30902 m
.65361 .31527 L
s
[(1)] .65361 .29652 0 1 Mshowa
.80722 .30902 m
.80722 .31527 L
s
[(2)] .80722 .29652 0 1 Mshowa
.96083 .30902 m
.96083 .31527 L
s
[(3)] .96083 .29652 0 1 Mshowa
.125 Mabswid
.06989 .30902 m
.06989 .31277 L
s
.10061 .30902 m
.10061 .31277 L
s
.13134 .30902 m
.13134 .31277 L
s
.16206 .30902 m
.16206 .31277 L
s
.2235 .30902 m
.2235 .31277 L
s
.25422 .30902 m
.25422 .31277 L
s
.28495 .30902 m
.28495 .31277 L
s
.31567 .30902 m
.31567 .31277 L
s
.37711 .30902 m
.37711 .31277 L
s
.40783 .30902 m
.40783 .31277 L
s
.43856 .30902 m
.43856 .31277 L
s
.46928 .30902 m
.46928 .31277 L
s
.53072 .30902 m
.53072 .31277 L
s
.56144 .30902 m
.56144 .31277 L
s
.59217 .30902 m
.59217 .31277 L
s
.62289 .30902 m
.62289 .31277 L
s
.68433 .30902 m
.68433 .31277 L
s
.71505 .30902 m
.71505 .31277 L
s
.74578 .30902 m
.74578 .31277 L
s
.7765 .30902 m
.7765 .31277 L
s
.83794 .30902 m
.83794 .31277 L
s
.86866 .30902 m
.86866 .31277 L
s
.89939 .30902 m
.89939 .31277 L
s
.93011 .30902 m
.93011 .31277 L
s
.00845 .30902 m
.00845 .31277 L
s
.99155 .30902 m
.99155 .31277 L
s
.25 Mabswid
0 .30902 m
1 .30902 L
s
.5 .01472 m
.50625 .01472 L
s
[(-3)] .4875 .01472 1 0 Mshowa
.5 .11282 m
.50625 .11282 L
s
[(-2)] .4875 .11282 1 0 Mshowa
.5 .21092 m
.50625 .21092 L
s
[(-1)] .4875 .21092 1 0 Mshowa
.5 .40712 m
.50625 .40712 L
s
[(1)] .4875 .40712 1 0 Mshowa
.5 .50522 m
.50625 .50522 L
s
[(2)] .4875 .50522 1 0 Mshowa
.5 .60332 m
.50625 .60332 L
s
[(3)] .4875 .60332 1 0 Mshowa
.125 Mabswid
.5 .03434 m
.50375 .03434 L
s
.5 .05396 m
.50375 .05396 L
s
.5 .07358 m
.50375 .07358 L
s
.5 .0932 m
.50375 .0932 L
s
.5 .13244 m
.50375 .13244 L
s
.5 .15206 m
.50375 .15206 L
s
.5 .17168 m
.50375 .17168 L
s
.5 .1913 m
.50375 .1913 L
s
.5 .23054 m
.50375 .23054 L
s
.5 .25016 m
.50375 .25016 L
s
.5 .26978 m
.50375 .26978 L
s
.5 .2894 m
.50375 .2894 L
s
.5 .32864 m
.50375 .32864 L
s
.5 .34826 m
.50375 .34826 L
s
.5 .36788 m
.50375 .36788 L
s
.5 .3875 m
.50375 .3875 L
s
.5 .42674 m
.50375 .42674 L
s
.5 .44636 m
.50375 .44636 L
s
.5 .46598 m
.50375 .46598 L
s
.5 .4856 m
.50375 .4856 L
s
.5 .52484 m
.50375 .52484 L
s
.5 .54446 m
.50375 .54446 L
s
.5 .56408 m
.50375 .56408 L
s
.5 .5837 m
.50375 .5837 L
s
.25 Mabswid
.5 0 m
.5 .61803 L
s
0 0 m
1 0 L
1 .61803 L
0 .61803 L
closepath
clip
newpath
.5 Mabswid
.02381 .01472 m
.02846 .01472 L
.03279 .01472 L
.03523 .01472 L
.03754 .01472 L
.03881 .01472 L
.03953 .11282 L
.0402 .11282 L
.04262 .11282 L
.06244 .11282 L
.10458 .11282 L
.14393 .11282 L
.16369 .11282 L
.18177 .11282 L
.18652 .11282 L
.18904 .11282 L
.19042 .11282 L
.19172 .11282 L
.19295 .21092 L
.19365 .21092 L
.19429 .21092 L
.19662 .21092 L
.20117 .21092 L
.22205 .21092 L
.26154 .21092 L
.29951 .21092 L
.32066 .21092 L
.33067 .21092 L
.33994 .21092 L
.34233 .21092 L
.34458 .21092 L
.3457 .21092 L
.34692 .30902 L
.34758 .30902 L
.34827 .30902 L
.34951 .30902 L
.35992 .30902 L
.37885 .30902 L
.41695 .30902 L
.45751 .30902 L
.49656 .30902 L
.53806 .30902 L
.57804 .30902 L
.61651 .30902 L
.63638 .30902 L
.6464 .30902 L
.64915 .30902 L
.65066 .30902 L
.6521 .30902 L
.65274 .30902 L
Mistroke
.65343 .30902 L
.65418 .40712 L
.65488 .40712 L
.65742 .40712 L
.69906 .40712 L
.73918 .40712 L
.77778 .40712 L
.78812 .40712 L
.79776 .40712 L
.80261 .40712 L
.80401 .40712 L
.80534 .40712 L
.80652 .40712 L
.80781 .50522 L
.80914 .50522 L
.81059 .50522 L
.81354 .50522 L
.81884 .50522 L
.85909 .50522 L
.89783 .50522 L
.91752 .50522 L
.93902 .50522 L
.94834 .50522 L
.95346 .50522 L
.95598 .50522 L
.95829 .50522 L
.95942 .50522 L
.96048 .50522 L
.96158 .60332 L
.9628 .60332 L
.96767 .60332 L
.97619 .60332 L
Mfstroke
5 Mabswid
.03917 .01472 Mdot
.19278 .11282 Mdot
.34639 .21092 Mdot
.5 .30902 Mdot
.65361 .40712 Mdot
.80722 .50522 Mdot
.96083 .60332 Mdot
% End of Graphics
MathPictureEnd
%%PSTrailer
end
grestore

%%EPS Trailer
