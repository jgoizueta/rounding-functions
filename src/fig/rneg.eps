%!PS-Adobe-2.0 EPSF-1.2
%%BoundingBox: 0 356 288 533
%%HiResBoundingBox: 0 356 288 533.938
%%Creator: (Mathematica Microsoft Windows 3.0)
%%Title: Clipboard
%%CreationDate: (01/23/02) (16:39:07)
%%DocumentNeededResources: (atend)
%%DocumentFonts: (atend)
%%DocumentNeededFonts: (atend)
%%EndComments
gsave
150 dict begin
/Mfixwid true def
/Mrot 0 def
/Mpstart {
    MathPictureStart
} bind def
/Mpend {
    MathPictureEnd
} bind def
/Mscale {
    0 1 0 1
    5 -1 roll
    MathScale
} bind def
/Plain  /Courier findfont def
/Bold   /Courier-Bold findfont def
/Italic /Courier-Oblique findfont def
/MathPictureStart {
    /Mimatrix
     matrix currentmatrix
    def
    gsave
    newpath
    Mleft
    Mbottom
    translate
    /Mtmatrix
    matrix currentmatrix
    def
    Plain
    Mfontsize scalefont
    setfont
    0 setgray
    0 setlinewidth
} bind def
/MathPictureEnd {
    grestore
} bind def
/MathSubStart {
         Momatrix
        Mgmatrix Mtmatrix
        Mleft Mbottom
        Mwidth Mheight
        9 -2 roll
        moveto
        Mtmatrix setmatrix
        currentpoint
        Mgmatrix setmatrix
        11 -2 roll
        moveto
        Mtmatrix setmatrix
        currentpoint
        2 copy translate
        /Mtmatrix matrix currentmatrix def
        /Mleft 0 def
        /Mbottom 0 def
        3 -1 roll
        exch sub
        /Mheight exch def
        sub
        /Mwidth exch def
} bind def
/MathSubEnd {
        /Mheight exch def
        /Mwidth exch def
        /Mbottom exch def
        /Mleft exch def
        /Mtmatrix exch def
        dup setmatrix
        /Mgmatrix exch def
          /Momatrix exch def
} bind def
/Mdot {
    moveto
    0 0 rlineto
    stroke
} bind def
/Mtetra {
    moveto
    lineto
    lineto
    lineto
    fill
} bind def
/Metetra {
    moveto
    lineto
    lineto
    lineto
    closepath
    gsave
    fill
    grestore
    0 setgray
    stroke
} bind def
/Mistroke {
    flattenpath
    0 0 0
    {
    4 2 roll
    pop pop
    }
    {
    4 -1 roll
    2 index
    sub dup mul
    4 -1 roll
    2 index
    sub dup mul
    add sqrt
    4 -1 roll
    add
    3 1 roll
    }
    {
    stop
    }
    {
    stop
    }
    pathforall
    pop pop
    currentpoint
    stroke
    moveto
    currentdash
    3 -1 roll
    add
    setdash
} bind def
/Mfstroke {
    stroke
    currentdash
    pop 0
    setdash
} bind def
/Mrotsboxa {
    gsave
    dup
    /Mrot
    exch def
    Mrotcheck
    Mtmatrix
    dup
    setmatrix
    7 1 roll
    4 index
    4 index
    translate
    rotate
    3 index
    -1 mul
    3 index
    -1 mul
    translate
    /Mtmatrix
    matrix
    currentmatrix
    def
    grestore
    Msboxa
    3  -1 roll
    /Mtmatrix
    exch def
    /Mrot
    0 def
} bind def
/Msboxa {
    newpath
    5 -1 roll
    Mvboxa
    pop
    Mboxout
    6 -1 roll
    5 -1 roll
    4 -1 roll
    Msboxa1
    5 -3 roll
    Msboxa1
    Mboxrot
    [
    7 -2 roll
    2 copy
    [
    3 1 roll
    10 -1 roll
    9 -1 roll
    ]
    6 1 roll
    5 -2 roll
    ]
} bind def
/Msboxa1 {
    sub
    2 div
    dup
    2 index
    1 add
    mul
    3 -1 roll
    -1 add
    3 -1 roll
    mul
} bind def
/Mvboxa {
    Mfixwid
    {
    Mvboxa1
    }
    {
    dup
    Mwidthcal
    0 exch
    {
    add
    }
    forall
    exch
    Mvboxa1
    4 index
    7 -1 roll
    add
    4 -1 roll
    pop
    3 1 roll
    }
    ifelse
} bind def
/Mvboxa1 {
    gsave
    newpath
    [ true
    3 -1 roll
    {
    Mbbox
    5 -1 roll
    {
    0
    5 1 roll
    }
    {
    7 -1 roll
    exch sub
    (m) stringwidth pop
    .3 mul
    sub
    7 1 roll
    6 -1 roll
    4 -1 roll
    Mmin
    3 -1 roll
    5 index
    add
    5 -1 roll
    4 -1 roll
    Mmax
    4 -1 roll
    }
    ifelse
    false
    }
    forall
    { stop } if
    counttomark
    1 add
    4 roll
    ]
    grestore
} bind def
/Mbbox {
    0 0 moveto
    false charpath
    flattenpath
    pathbbox
    newpath
} bind def
/Mmin {
    2 copy
    gt
    { exch } if
    pop
} bind def
/Mmax {
    2 copy
    lt
    { exch } if
    pop
} bind def
/Mrotshowa {
    dup
    /Mrot
    exch def
    Mrotcheck
    Mtmatrix
    dup
    setmatrix
    7 1 roll
    4 index
    4 index
    translate
    rotate
    3 index
    -1 mul
    3 index
    -1 mul
    translate
    /Mtmatrix
    matrix
    currentmatrix
    def
    Mgmatrix setmatrix
    Mshowa
    /Mtmatrix
    exch def
    /Mrot 0 def
} bind def
/Mshowa {
    4 -2 roll
    moveto
    2 index
    Mtmatrix setmatrix
    Mvboxa
    7 1 roll
    Mboxout
    6 -1 roll
    5 -1 roll
    4 -1 roll
    Mshowa1
    4 1 roll
    Mshowa1
    rmoveto
    currentpoint
    Mfixwid
    {
    Mshowax
    }
    {
    Mshoway
    }
    ifelse
    pop pop pop pop
    Mgmatrix setmatrix
} bind def
/Mshowax {
    0 1
        4 index length
        -1 add
        {
        2 index
        4 index
        2 index
        get
        3 index
        add
        moveto
        4 index
        exch get
        show
        } for
} bind def
/Mshoway {
        3 index
        Mwidthcal
        5 1 roll
    0 1
    4 index length
    -1 add
    {
    2 index
    4 index
    2 index
    get
    3 index
    add
    moveto
    4 index
    exch get
    [
    6 index
    aload
    length
    2 add
    -1 roll
    {
    pop
    Strform
    stringwidth
    pop
    neg
    exch
    add
    0 rmoveto
    }
    exch
    kshow
    cleartomark
    } for
    pop
} bind def
/Mwidthcal {
    [
    exch
    {
    Mwidthcal1
    }
    forall
    ]
    [
    exch
    dup
    Maxlen
    -1 add
    0 1
    3 -1 roll
    {
    [
    exch
    2 index
    {
    1 index
    Mget
    exch
    }
    forall
    pop
    Maxget
    exch
    }
    for
    pop
    ]
    Mreva
} bind def
/Mreva  {
    [
    exch
    aload
    length
    -1 1
    {1 roll}
    for
    ]
} bind def
/Mget   {
    1 index
    length
    -1 add
    1 index
    ge
    {
    get
    }
    {
    pop pop
    0
    }
    ifelse
} bind def
/Maxlen {
    [
    exch
    {
    length
    }
    forall
    Maxget
} bind def
/Maxget {
    counttomark
    -1 add
    1 1
    3 -1 roll
    {
    pop
    Mmax
    }
    for
    exch
    pop
} bind def
/Mwidthcal1 {
    [
    exch
    {
    Strform
    stringwidth
    pop
    }
    forall
    ]
} bind def
/Strform {
    /tem (x) def
    tem 0
    3 -1 roll
    put
    tem
} bind def
/Mshowa1 {
    2 copy
    add
    4 1 roll
    sub
    mul
    sub
    -2 div
} bind def
/MathScale {
    Mwidth
    Mheight
    Mlp
    translate
    scale
    /yscale exch def
    /ybias exch def
    /xscale exch def
    /xbias exch def
    /Momatrix
    xscale yscale matrix scale
    xbias ybias matrix translate
    matrix concatmatrix def
    /Mgmatrix
    matrix currentmatrix
    def
} bind def
/Mlp {
    3 copy
    Mlpfirst
    {
    Mnodistort
    {
    Mmin
    dup
    } if
    4 index
    2 index
    2 index
    Mlprun
    11 index
    11 -1 roll
    10 -4 roll
    Mlp1
    8 index
    9 -5 roll
    Mlp1
    4 -1 roll
    and
    { exit } if
    3 -1 roll
    pop pop
    } loop
    exch
    3 1 roll
    7 -3 roll
    pop pop pop
} bind def
/Mlpfirst {
    3 -1 roll
    dup length
    2 copy
    -2 add
    get
    aload
    pop pop pop
    4 -2 roll
    -1 add
    get
    aload
    pop pop pop
    6 -1 roll
    3 -1 roll
    5 -1 roll
    sub
    dup /MsaveAx exch def
    div
    4 1 roll
    exch sub
    dup /MsaveAy exch def
    div
} bind def
/Mlprun {
    2 copy
    4 index
    0 get
    dup
    4 1 roll
    Mlprun1
    3 copy
    8 -2 roll
    9 -1 roll
    {
    3 copy
    Mlprun1
    3 copy
    11 -3 roll
    /gt Mlpminmax
    8 3 roll
    11 -3 roll
    /lt Mlpminmax
    8 3 roll
    } forall
    pop pop pop pop
    3 1 roll
    pop pop
    aload pop
    5 -1 roll
    aload pop
    exch
    6 -1 roll
    Mlprun2
    8 2 roll
    4 -1 roll
    Mlprun2
    6 2 roll
    3 -1 roll
    Mlprun2
    4 2 roll
    exch
    Mlprun2
    6 2 roll
} bind def
/Mlprun1 {
    aload pop
    exch
    6 -1 roll
    5 -1 roll
    mul add
    4 -2 roll
    mul
    3 -1 roll
    add
} bind def
/Mlprun2 {
    2 copy
    add 2 div
    3 1 roll
    exch sub
} bind def
/Mlpminmax {
    cvx
    2 index
    6 index
    2 index
    exec
    {
    7 -3 roll
    4 -1 roll
    } if
    1 index
    5 index
    3 -1 roll
    exec
    {
    4 1 roll
    pop
    5 -1 roll
    aload
    pop pop
    4 -1 roll
    aload pop
    [
    8 -2 roll
    pop
    5 -2 roll
    pop
    6 -2 roll
    pop
    5 -1 roll
    ]
    4 1 roll
    pop
    }
    {
    pop pop pop
    } ifelse
} bind def
/Mlp1 {
    5 index
    3 index sub
    5 index
    2 index mul
    1 index
    le
    1 index
    0 le
    or
    dup
    not
    {
    1 index
    3 index div
    .99999 mul
    8 -1 roll
    pop
    7 1 roll
    }
    if
    8 -1 roll
    2 div
    7 -2 roll
    pop sub
    5 index
    6 -3 roll
    pop pop
    mul sub
    exch
} bind def
/intop 0 def
/inrht 0 def
/inflag 0 def
/outflag 0 def
/xadrht 0 def
/xadlft 0 def
/yadtop 0 def
/yadbot 0 def
/Minner {
    outflag
    1
    eq
    {
    /outflag 0 def
    /intop 0 def
    /inrht 0 def
    } if
    5 index
    gsave
    Mtmatrix setmatrix
    Mvboxa pop
    grestore
    3 -1 roll
    pop
    dup
    intop
    gt
    {
    /intop
    exch def
    }
    { pop }
    ifelse
    dup
    inrht
    gt
    {
    /inrht
    exch def
    }
    { pop }
    ifelse
    pop
    /inflag
    1 def
} bind def
/Mouter {
    /xadrht 0 def
    /xadlft 0 def
    /yadtop 0 def
    /yadbot 0 def
    inflag
    1 eq
    {
    dup
    0 lt
    {
    dup
    intop
    mul
    neg
    /yadtop
    exch def
    } if
    dup
    0 gt
    {
    dup
    intop
    mul
    /yadbot
    exch def
    }
    if
    pop
    dup
    0 lt
    {
    dup
    inrht
    mul
    neg
    /xadrht
    exch def
    } if
    dup
    0 gt
    {
    dup
    inrht
    mul
    /xadlft
    exch def
    } if
    pop
    /outflag 1 def
    }
    { pop pop}
    ifelse
    /inflag 0 def
    /inrht 0 def
    /intop 0 def
} bind def
/Mboxout {
    outflag
    1
    eq
    {
    4 -1
    roll
    xadlft
    leadjust
    add
    sub
    4 1 roll
    3 -1
    roll
    yadbot
    leadjust
    add
    sub
    3 1
    roll
    exch
    xadrht
    leadjust
    add
    add
    exch
    yadtop
    leadjust
    add
    add
    /outflag 0 def
    /xadlft 0 def
    /yadbot 0 def
    /xadrht 0 def
    /yadtop 0 def
    } if
} bind def
/leadjust {
    (m) stringwidth pop
    .5 mul
} bind def
/Mrotcheck {
    dup
    90
    eq
    {
    yadbot
    /yadbot
    xadrht
    def
    /xadrht
    yadtop
    def
    /yadtop
    xadlft
    def
    /xadlft
    exch
    def
    }
    if
    dup
    cos
    1 index
    sin
    Checkaux
    dup
    cos
    1 index
    sin neg
    exch
    Checkaux
    3 1 roll
    pop pop
} bind def
/Checkaux {
    4 index
    exch
    4 index
    mul
    3 1 roll
    mul add
    4 1 roll
} bind def
/Mboxrot {
    Mrot
    90 eq
    {
    brotaux
    4 2
    roll
    }
    if
    Mrot
    180 eq
    {
    4 2
        roll
    brotaux
    4 2
    roll
    brotaux
    }
    if
    Mrot
    270 eq
    {
    4 2
    roll
    brotaux
    }
    if
} bind def
/brotaux {
    neg
    exch
    neg
} bind def
/Mabsproc {
        0
        matrix defaultmatrix
        dtransform idtransform
        dup mul exch
        dup mul
        add sqrt
} bind def
/Mabswid {
        Mabsproc
        setlinewidth
} bind def
/Mabsdash {
        exch
        [
        exch
        {
        Mabsproc
        }
        forall
        ]
        exch
        setdash
} bind def
/MBeginOrig { Momatrix concat} bind def
/MEndOrig { Mgmatrix setmatrix} bind def
/sampledsound where
{ pop}
{ /sampledsound {
exch
pop
exch
5 1 roll
mul
4 idiv
mul
2 idiv
exch pop
exch
/Mtempproc exch def
{ Mtempproc pop }
repeat
} bind def
} ifelse
% Here are the short operators
/g { setgray} bind def
/k { setcmykcolor} bind def
/m { moveto} bind def
/p { gsave} bind def
/r { setrgbcolor} bind def
/w { setlinewidth} bind def
/C { curveto} bind def
/F { fill} bind def
/L { lineto} bind def
/P { grestore} bind def
/s { stroke} bind def

/MFill {
    0 0         moveto
    Mwidth 0    lineto
    Mwidth Mheight  lineto
    0 Mheight   lineto
    fill
} bind def

/MPlotRegion {
    3 index
    Mwidth mul
    2 index
    Mheight mul
    translate
    exch sub
    Mheight mul
    /Mheight
    exch def
    exch sub
    Mwidth mul
    /Mwidth
    exch def
} bind def

/Mcharproc
{
    currentfile
    (x)
    readhexstring
    pop
    0 get
    exch
    div
} bind def

/Mshadeproc
{
    dup
    3 1
    roll
    {
    dup
    Mcharproc
    3 1
    roll
    } repeat
    1 eq
    {
    setgray
    }
    {
    3 eq
    {
    setrgbcolor
    }
    {
    setcmykcolor
    } ifelse
    } ifelse
} bind def

/Mrectproc
{
    3 index
    2 index
    moveto
    2 index
    3 -1
    roll
    lineto
    dup
    3 1
    roll
    lineto
    lineto
    fill
} bind def

/Mcolorimage
{
    7 1
    roll
    pop
    pop
    matrix
    invertmatrix
    concat
    2 exch exp
    1 sub
    3 1 roll
    1 1
    2 index
    {
    1 1
    4 index
    {
    dup
    1 sub
    exch
    2 index
    dup
    1 sub
    exch
    7 index
    9 index
    Mshadeproc
    Mrectproc
    } for
    pop
    } for
    pop pop pop pop
} bind def

/Mimage
{
    pop
    matrix
    invertmatrix
    concat
    2 exch exp
    1 sub
    3 1 roll
    1 1
    2 index
    {
    1 1
    4 index
    {
    dup
    1 sub 
    exch
    2 index
    dup
    1 sub
    exch
    7 index
    Mcharproc
    setgray
    Mrectproc
    } for
    pop
    } for
    pop pop pop
} bind def
/Mnodistort true def
/colorimage where
{ pop /Mcolorimage {colorimage} bind def /Mimage {image} bind def}
{
/colorimage {Mcolorimage} bind def
} ifelse
1.000000 1.000000 scale
0.000000 177.937500 translate
1.000000 -1.000000 scale
0.000000 0.000000 translate
/Mleft      0.000000 def
/Mbottom    0.000000 def
/Mwidth     288.000000 def
/Mheight    177.937500 def
0 setgray
0 setlinewidth
/Courier findfont 12 scalefont setfont
/Mfontsize 12 def
/Plain /Courier findfont def

0 Mbottom Mheight neg add 2 mul Mheight add translate
1 -1 scale
%!
%%Creator: Mathematica
%%AspectRatio: .61803 
MathPictureStart
/Mabs {
Mgmatrix idtransform
Mtmatrix dtransform
} bind def
/Mabsadd { Mabs
3 -1 roll add
3 1 roll add
exch } bind def
%% Graphics
/Courier findfont 10  scalefont  setfont
% Scaling calculations
0.5 0.10582 0.341717 0.0654004 [
[.07672 .32922 -6 -9 ]
[.07672 .32922 6 0 ]
[.28836 .32922 -6 -9 ]
[.28836 .32922 6 0 ]
[.71164 .32922 -3 -9 ]
[.71164 .32922 3 0 ]
[.92328 .32922 -3 -9 ]
[.92328 .32922 3 0 ]
[.4875 .08012 -12 -4.5 ]
[.4875 .08012 0 4.5 ]
[.4875 .21092 -12 -4.5 ]
[.4875 .21092 0 4.5 ]
[.4875 .47252 -6 -4.5 ]
[.4875 .47252 0 4.5 ]
[.4875 .60332 -6 -4.5 ]
[.4875 .60332 0 4.5 ]
[ 0 0 0 0 ]
[ 1 .61803 0 0 ]
] MathScale
% Start of Graphics
1 setlinecap
1 setlinejoin
newpath
0 g
.25 Mabswid
.07672 .34172 m
.07672 .34797 L
s
[(-4)] .07672 .32922 0 1 Mshowa
.28836 .34172 m
.28836 .34797 L
s
[(-2)] .28836 .32922 0 1 Mshowa
.71164 .34172 m
.71164 .34797 L
s
[(2)] .71164 .32922 0 1 Mshowa
.92328 .34172 m
.92328 .34797 L
s
[(4)] .92328 .32922 0 1 Mshowa
.125 Mabswid
.12963 .34172 m
.12963 .34547 L
s
.18254 .34172 m
.18254 .34547 L
s
.23545 .34172 m
.23545 .34547 L
s
.34127 .34172 m
.34127 .34547 L
s
.39418 .34172 m
.39418 .34547 L
s
.44709 .34172 m
.44709 .34547 L
s
.55291 .34172 m
.55291 .34547 L
s
.60582 .34172 m
.60582 .34547 L
s
.65873 .34172 m
.65873 .34547 L
s
.76455 .34172 m
.76455 .34547 L
s
.81746 .34172 m
.81746 .34547 L
s
.87037 .34172 m
.87037 .34547 L
s
.02381 .34172 m
.02381 .34547 L
s
.97619 .34172 m
.97619 .34547 L
s
.25 Mabswid
0 .34172 m
1 .34172 L
s
.5 .08012 m
.50625 .08012 L
s
[(-4)] .4875 .08012 1 0 Mshowa
.5 .21092 m
.50625 .21092 L
s
[(-2)] .4875 .21092 1 0 Mshowa
.5 .47252 m
.50625 .47252 L
s
[(2)] .4875 .47252 1 0 Mshowa
.5 .60332 m
.50625 .60332 L
s
[(4)] .4875 .60332 1 0 Mshowa
.125 Mabswid
.5 .11282 m
.50375 .11282 L
s
.5 .14552 m
.50375 .14552 L
s
.5 .17822 m
.50375 .17822 L
s
.5 .24362 m
.50375 .24362 L
s
.5 .27632 m
.50375 .27632 L
s
.5 .30902 m
.50375 .30902 L
s
.5 .37442 m
.50375 .37442 L
s
.5 .40712 m
.50375 .40712 L
s
.5 .43982 m
.50375 .43982 L
s
.5 .50522 m
.50375 .50522 L
s
.5 .53792 m
.50375 .53792 L
s
.5 .57062 m
.50375 .57062 L
s
.5 .04742 m
.50375 .04742 L
s
.5 .01472 m
.50375 .01472 L
s
.25 Mabswid
.5 0 m
.5 .61803 L
s
0 0 m
1 0 L
1 .61803 L
0 .61803 L
closepath
clip
newpath
.5 Mabswid
.02381 .08012 m
.06244 .08012 L
.08255 .08012 L
.10458 .08012 L
.11448 .08012 L
.11992 .08012 L
.1226 .08012 L
.12507 .08012 L
.12739 .08012 L
.12857 .08012 L
.12986 .14552 L
.13115 .14552 L
.13254 .14552 L
.13506 .14552 L
.14415 .14552 L
.18538 .14552 L
.20597 .14552 L
.21599 .14552 L
.22508 .14552 L
.22966 .14552 L
.23206 .14552 L
.23338 .14552 L
.2346 .14552 L
.23568 .21092 L
.23683 .21092 L
.23927 .21092 L
.24357 .21092 L
.26328 .21092 L
.28309 .21092 L
.30464 .21092 L
.31467 .21092 L
.32534 .21092 L
.33444 .21092 L
.33693 .21092 L
.33824 .21092 L
.33962 .21092 L
.34083 .21092 L
.34152 .27632 L
.34216 .27632 L
.34448 .27632 L
.38353 .27632 L
.40344 .27632 L
.42503 .27632 L
.43513 .27632 L
.44066 .27632 L
.44336 .27632 L
.44454 .27632 L
.44583 .27632 L
.447 .27632 L
.44809 .34172 L
Mistroke
.44913 .34172 L
.45023 .34172 L
.45496 .34172 L
.46501 .34172 L
.50664 .34172 L
.52755 .34172 L
.53672 .34172 L
.54157 .34172 L
.54676 .34172 L
.54938 .34172 L
.55066 .34172 L
.55185 .34172 L
.55293 .40712 L
.55407 .40712 L
.55648 .40712 L
.56555 .40712 L
.58536 .40712 L
.62317 .40712 L
.64255 .40712 L
.64786 .40712 L
.65345 .40712 L
.65575 .40712 L
.65702 .40712 L
.65821 .40712 L
.65889 .47252 L
.65963 .47252 L
.66091 .47252 L
.66342 .47252 L
.70439 .47252 L
.72479 .47252 L
.74385 .47252 L
.75324 .47252 L
.75787 .47252 L
.76215 .47252 L
.76338 .47252 L
.76453 .47252 L
.76574 .53792 L
.76638 .53792 L
.76707 .53792 L
.77242 .53792 L
.78179 .53792 L
.8229 .53792 L
.8434 .53792 L
.8534 .53792 L
.86249 .53792 L
.86703 .53792 L
.86827 .53792 L
.86959 .53792 L
.87071 .60332 L
.87195 .60332 L
Mistroke
.88089 .60332 L
.90056 .60332 L
.94087 .60332 L
.97619 .60332 L
Mfstroke
5 Mabswid
.02381 .01472 Mdot
.12963 .08012 Mdot
.23545 .14552 Mdot
.34127 .21092 Mdot
.44709 .27632 Mdot
.55291 .34172 Mdot
.65873 .40712 Mdot
.76455 .47252 Mdot
.87037 .53792 Mdot
.97619 .60332 Mdot
% End of Graphics
MathPictureEnd
%%PSTrailer
end
grestore

%%EPS Trailer
